#lang ivy1.7

attribute method = mc

type proc_id = {n0, n1}
type mode_t = {start, door, wait, inner, crit}
# line number  1      4     5     8      10
type flag_t = {0, 1, 2, 3, 4}

var flag(X:proc_id) : flag_t
var process(X:proc_id) : mode_t

after init {
    flag(X:proc_id) := 1;
    process(X:proc_id) := start;
}

export action move(x:proc_id) = {
    if process(x) = start {   # Switch case
        flag(x) := 1;
        if ~exists Y:proc_id. flag(Y) = 3 | flag(Y) = 4 {
            flag(x) := 3;
            process(x) := door;
        }
    } else { if process(x) = door {
        if some y:proc_id. flag(y) = 1 {
            flag(x) := 2;
            process(x) := wait;
        }
        else {
            flag(x) := 4;
            process(x) := inner;
        }
    } else { if process(x) = wait {
        if some y:proc_id. flag(y) = 4 {
            flag(x) := 4;
            process(x) := inner;
        }
    } else { if process(x) = inner {
        if ~exists Y:proc_id. flag(Y) = 3 | flag(Y) = 4 {
            process(x) := crit
        }
    } else { if process(x) = crit {
        if ~exists Y:proc_id. flag(Y) = 2 | flag(Y) = 3 {
            flag(x) := 0;
            process(x) := start;
        }
    }}}}}
}

invariant ~(process(X:proc_id) = crit & process(Y:proc_id) = crit)