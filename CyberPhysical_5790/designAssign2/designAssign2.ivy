#lang ivy1.7

attribute method = mc

type proc_id = {n0, n1}
type mode_t = {start, door, wait, inner, crit}
#line number   1      4     5     8      10
type flag_t = {0, 1, 2, 3, 4}

module process(X:proc_id) = {
    individual mode : mode_t
    individual flag : flag_t

    after init {
        mode := start;
        flag := 1;
    }

    action move = {
        if mode = start {   # Switch case
            flag := 1;
            if not proc_inst(Y:proc_id) <= 3 {
                flag := 3;
                mode := door;
            }
        } else { if mode = door {
            if some y:proc_id. proc_inst(y).flag = 1 {
                flag := 2;
                mode := wait;
            }
            else {
                mode := 4;
                mode := inner;
            }
        } else { if mode = wait {
            if some y:proc_id. proc_inst(y).flag = 4 {
                mode := 4;
                mode := inner;
            }
        } else { if mode = inner {
            if some y:proc_id. ~proc_inst(y).flag >= 2 {
                mode := crit
            }
        } else { if mode = crit {
            if some y:proc_id. ~proc_inst(y).flag = 2 {
                flag := 0;
                mode := start;
            }
        }}}}}
    }
}

instance proc_inst(X:proc_id) : process(X)
export proc_inst(X:proc_id).move

invariant ~(proc_inst(X:proc_id).mode = crit & proc_inst(Y:proc_id).mode = crit)